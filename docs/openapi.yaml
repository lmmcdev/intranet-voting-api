openapi: 3.0.0
info:
  title: Intranet Voting API
  version: 1.0.0
  description: |
    Azure Functions-based voting and employee management system for Employee of the Month nominations.

    This API enables:
    - Employee synchronization from Azure AD and ADP
    - Employee management and search
    - Nomination creation and management
    - Voting period administration
    - Results tracking and winner determination

    All endpoints require Bearer token authentication.
  contact:
    name: LMMC Development Team
  license:
    name: Proprietary

servers:
  - url: https://your-api.azurewebsites.net/api
    description: Production server
  - url: http://localhost:7071/api
    description: Local development server

security:
  - bearerAuth: []

tags:
  - name: Employees
    description: Employee management operations
  - name: Employee Sync
    description: Employee synchronization from Azure AD and ADP
  - name: Nominations
    description: Nomination management for voting periods
  - name: Voting
    description: Voting period and results management

paths:
  /employees:
    get:
      tags:
        - Employees
      summary: Get all employees
      description: Retrieves a list of all employees with optional filtering by status, department, position, and location
      operationId: getEmployees
      parameters:
        - name: isActive
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
          example: true
        - name: department
          in: query
          description: Filter by department name
          required: false
          schema:
            type: string
          example: "Engineering"
        - name: position
          in: query
          description: Filter by position title
          required: false
          schema:
            type: string
          example: "Software Engineer"
        - name: location
          in: query
          description: Filter by office location
          required: false
          schema:
            type: string
          example: "New York"
      responses:
        '200':
          description: Successfully retrieved employees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeListResponse'
              example:
                success: true
                data:
                  employees:
                    - id: "emp-123"
                      fullName: "John Doe"
                      firstName: "John"
                      lastName: "Doe"
                      email: "john.doe@company.com"
                      department: "Engineering"
                      position: "Software Engineer"
                      location: "New York"
                      isActive: true
                      createdAt: "2024-01-15T10:30:00Z"
                      updatedAt: "2024-01-15T10:30:00Z"
                  total: 1
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /employees/{id}:
    get:
      tags:
        - Employees
      summary: Get employee by ID
      description: Retrieves detailed information about a specific employee
      operationId: getEmployeeById
      parameters:
        - name: id
          in: path
          description: Unique employee identifier
          required: true
          schema:
            type: string
          example: "emp-123"
      responses:
        '200':
          description: Successfully retrieved employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
              example:
                success: true
                data:
                  id: "emp-123"
                  fullName: "John Doe"
                  firstName: "John"
                  lastName: "Doe"
                  email: "john.doe@company.com"
                  department: "Engineering"
                  position: "Software Engineer"
                  location: "New York"
                  isActive: true
                  source: "azure"
                  votingGroup: "group-a"
                  createdAt: "2024-01-15T10:30:00Z"
                  updatedAt: "2024-01-15T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /employees/autocomplete:
    get:
      tags:
        - Employees
      summary: Autocomplete employee search
      description: Search for employees by name with a minimum query length of 2 characters
      operationId: autocompleteEmployees
      parameters:
        - name: q
          in: query
          description: Search query (minimum 2 characters)
          required: true
          schema:
            type: string
            minLength: 2
          example: "John"
      responses:
        '200':
          description: Successfully retrieved matching employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        fullName:
                          type: string
                        email:
                          type: string
                        department:
                          type: string
                        position:
                          type: string
              example:
                success: true
                data:
                  - id: "emp-123"
                    fullName: "John Doe"
                    email: "john.doe@company.com"
                    department: "Engineering"
                    position: "Software Engineer"
                  - id: "emp-456"
                    fullName: "John Smith"
                    email: "john.smith@company.com"
                    department: "Sales"
                    position: "Account Manager"
        '400':
          description: Query too short or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Query must be at least 2 characters"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /employees/delete-all:
    delete:
      tags:
        - Employees
      summary: Delete all employees
      description: Removes all employees from the database. Use with caution - this operation cannot be undone.
      operationId: deleteAllEmployees
      responses:
        '200':
          description: Successfully deleted all employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      deletedCount:
                        type: integer
              example:
                success: true
                data:
                  message: "Successfully deleted 150 employees"
                  deletedCount: 150
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /employees/sync:
    post:
      tags:
        - Employee Sync
      summary: Sync all employees
      description: Synchronizes all employees from Azure AD and ADP data sources to Cosmos DB
      operationId: syncAllEmployees
      responses:
        '200':
          description: Sync completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      result:
                        $ref: '#/components/schemas/SyncResult'
              example:
                success: true
                data:
                  message: "Employee sync completed"
                  result:
                    newUsers: 5
                    updatedUsers: 45
                    totalProcessed: 150
                    errors: []
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Sync failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Employee sync failed"

  /employees/{id}/sync:
    post:
      tags:
        - Employee Sync
      summary: Sync single employee
      description: Synchronizes a specific employee from Azure AD and ADP data sources
      operationId: syncSingleEmployee
      parameters:
        - name: id
          in: path
          description: Unique employee identifier
          required: true
          schema:
            type: string
          example: "emp-123"
      responses:
        '200':
          description: Employee sync completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      employee:
                        $ref: '#/components/schemas/Employee'
                      matchedWithExternal:
                        type: boolean
              example:
                success: true
                data:
                  message: "Employee synced successfully"
                  employee:
                    id: "emp-123"
                    fullName: "John Doe"
                    email: "john.doe@company.com"
                    department: "Engineering"
                    position: "Software Engineer"
                    isActive: true
                  matchedWithExternal: true
        '400':
          description: Invalid employee ID or sync failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Employee not found in Azure AD"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /employees/sync/status:
    get:
      tags:
        - Employee Sync
      summary: Get sync status
      description: Retrieves the current synchronization status comparing Azure AD and Cosmos DB employee counts
      operationId: getSyncStatus
      responses:
        '200':
          description: Successfully retrieved sync status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      azureEmployeeCount:
                        type: integer
                        description: Number of employees in Azure AD
                      cosmosEmployeeCount:
                        type: integer
                        description: Number of employees in Cosmos DB
                      syncNeeded:
                        type: boolean
                        description: Whether counts differ and sync is needed
                      lastSyncTime:
                        type: string
                        format: date-time
                        nullable: true
                        description: Timestamp of last sync operation
              example:
                success: true
                data:
                  azureEmployeeCount: 150
                  cosmosEmployeeCount: 145
                  syncNeeded: true
                  lastSyncTime: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to get sync status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/voting-groups/update:
    post:
      tags:
        - Employee Sync
      summary: Update voting groups
      description: Updates voting group assignments for all employees based on the specified strategy
      operationId: updateVotingGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - strategy
              properties:
                strategy:
                  type: string
                  enum: [location, department, custom]
                  description: Strategy for assigning voting groups
                customMappings:
                  type: string
                  description: JSON string containing custom group mappings (required when strategy is "custom")
            examples:
              location:
                summary: Location-based strategy
                value:
                  strategy: "location"
              department:
                summary: Department-based strategy
                value:
                  strategy: "department"
              custom:
                summary: Custom mapping strategy
                value:
                  strategy: "custom"
                  customMappings: '{"Engineering":"group-a","Sales":"group-b"}'
      responses:
        '200':
          description: Voting groups updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      result:
                        type: object
                        properties:
                          success:
                            type: boolean
                          totalUpdated:
                            type: integer
                          errors:
                            type: array
                            items:
                              type: string
              example:
                success: true
                data:
                  message: "Voting groups updated successfully"
                  result:
                    success: true
                    totalUpdated: 150
                    errors: []
        '400':
          description: Invalid strategy or custom mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidStrategy:
                  summary: Invalid strategy
                  value:
                    success: false
                    error: "Invalid strategy. Must be one of: location, department, custom"
                invalidMappings:
                  summary: Invalid custom mappings JSON
                  value:
                    success: false
                    error: "Invalid JSON format for customMappings"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /nominations:
    post:
      tags:
        - Nominations
      summary: Create nomination
      description: Creates a new nomination for the current voting period
      operationId: createNomination
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNominationRequest'
            example:
              nominatedEmployeeId: "emp-456"
              reason: "Exceptional leadership and innovation in Q1 projects"
              criteria:
                communication: 5
                innovation: 5
                leadership: 5
                problemSolving: 4
                reliability: 5
                teamwork: 5
      responses:
        '201':
          description: Nomination created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Nomination'
              example:
                success: true
                data:
                  id: "nom-789"
                  nominatedEmployeeId: "emp-456"
                  nominatorEmail: "john.doe@company.com"
                  votingPeriodId: "vp-2024-01"
                  reason: "Exceptional leadership and innovation in Q1 projects"
                  criteria:
                    communication: 5
                    innovation: 5
                    leadership: 5
                    problemSolving: 4
                    reliability: 5
                    teamwork: 5
                  createdAt: "2024-01-15T14:30:00Z"
        '400':
          description: Invalid request or nomination constraints violated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingFields:
                  summary: Missing required fields
                  value:
                    success: false
                    error: "Missing required fields: nominatedEmployeeId, reason, criteria"
                businessRule:
                  summary: Business rule violation
                  value:
                    success: false
                    error: "Cannot nominate yourself"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /nominations/{id}:
    get:
      tags:
        - Nominations
      summary: Get nomination by ID
      description: Retrieves details of a specific nomination
      operationId: getNomination
      parameters:
        - name: id
          in: path
          description: Unique nomination identifier
          required: true
          schema:
            type: string
          example: "nom-789"
      responses:
        '200':
          description: Successfully retrieved nomination
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Nomination'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Nomination not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Nomination not found"
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Nominations
      summary: Update nomination
      description: Updates an existing nomination
      operationId: updateNomination
      parameters:
        - name: id
          in: path
          description: Unique nomination identifier
          required: true
          schema:
            type: string
          example: "nom-789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNominationRequest'
            example:
              reason: "Updated reasoning for exceptional performance"
              criteria:
                communication: 5
                innovation: 5
                leadership: 5
                problemSolving: 5
                reliability: 5
                teamwork: 5
      responses:
        '200':
          description: Nomination updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Nomination'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Nominations
      summary: Delete nomination
      description: Deletes an existing nomination
      operationId: deleteNomination
      parameters:
        - name: id
          in: path
          description: Unique nomination identifier
          required: true
          schema:
            type: string
          example: "nom-789"
      responses:
        '200':
          description: Nomination deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
              example:
                success: true
                data:
                  message: "Nomination deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /voting:
    get:
      tags:
        - Voting
      summary: Get all voting periods
      description: Retrieves a list of all voting periods
      operationId: getAllVotingPeriods
      responses:
        '200':
          description: Successfully retrieved voting periods
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VotingPeriod'
              example:
                success: true
                data:
                  - id: "vp-2024-01"
                    year: 2024
                    month: 1
                    startDate: "2024-01-01T00:00:00Z"
                    endDate: "2024-01-31T23:59:59Z"
                    status: "closed"
                    createdAt: "2023-12-15T10:00:00Z"
                    updatedAt: "2024-02-01T00:00:00Z"
                  - id: "vp-2024-02"
                    year: 2024
                    month: 2
                    startDate: "2024-02-01T00:00:00Z"
                    endDate: "2024-02-29T23:59:59Z"
                    status: "active"
                    createdAt: "2024-01-20T10:00:00Z"
                    updatedAt: "2024-01-20T10:00:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /voting/current:
    get:
      tags:
        - Voting
      summary: Get current voting period
      description: Retrieves the currently active voting period
      operationId: getCurrentVotingPeriod
      responses:
        '200':
          description: Successfully retrieved current voting period
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/VotingPeriod'
              example:
                success: true
                data:
                  id: "vp-2024-02"
                  year: 2024
                  month: 2
                  startDate: "2024-02-01T00:00:00Z"
                  endDate: "2024-02-29T23:59:59Z"
                  status: "active"
                  createdAt: "2024-01-20T10:00:00Z"
                  updatedAt: "2024-01-20T10:00:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No active voting period found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /voting/{votingPeriodId}/results:
    get:
      tags:
        - Voting
      summary: Get voting results
      description: Retrieves results for a specific voting period, including rankings and statistics
      operationId: getVotingResults
      parameters:
        - name: votingPeriodId
          in: path
          description: Unique voting period identifier
          required: true
          schema:
            type: string
          example: "vp-2024-01"
      responses:
        '200':
          description: Successfully retrieved voting results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/VotingPeriodResults'
              example:
                success: true
                data:
                  votingPeriod:
                    id: "vp-2024-01"
                    year: 2024
                    month: 1
                    status: "closed"
                  totalNominations: 45
                  averageVotes: 3
                  results:
                    - votingPeriodId: "vp-2024-01"
                      employeeId: "emp-456"
                      employeeName: "Jane Smith"
                      department: "Engineering"
                      position: "Senior Engineer"
                      nominationCount: 8
                      percentage: 17.78
                      rank: 1
                      averageCriteria:
                        communication: 4.8
                        innovation: 4.9
                        leadership: 4.7
                        problemSolving: 4.8
                        reliability: 4.9
                        teamwork: 4.8
                  winner:
                    votingPeriodId: "vp-2024-01"
                    employeeId: "emp-456"
                    employeeName: "Jane Smith"
                    department: "Engineering"
                    position: "Senior Engineer"
                    nominationCount: 8
                    percentage: 17.78
                    rank: 1
                    averageCriteria:
                      communication: 4.8
                      innovation: 4.9
                      leadership: 4.7
                      problemSolving: 4.8
                      reliability: 4.9
                      teamwork: 4.8
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /voting/{votingPeriodId}/close:
    post:
      tags:
        - Voting
      summary: Close voting period
      description: Closes an active voting period and calculates final results
      operationId: closeVotingPeriod
      parameters:
        - name: votingPeriodId
          in: path
          description: Unique voting period identifier
          required: true
          schema:
            type: string
          example: "vp-2024-02"
      responses:
        '200':
          description: Voting period closed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      votingPeriod:
                        $ref: '#/components/schemas/VotingPeriod'
                      winner:
                        $ref: '#/components/schemas/VoteResult'
              example:
                success: true
                data:
                  message: "Voting period closed successfully"
                  votingPeriod:
                    id: "vp-2024-02"
                    year: 2024
                    month: 2
                    status: "closed"
                  winner:
                    employeeId: "emp-789"
                    employeeName: "Bob Johnson"
                    nominationCount: 10
        '400':
          description: Invalid voting period or already closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Voting period is already closed"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /voting/winners:
    get:
      tags:
        - Voting
      summary: Get all winners
      description: Retrieves a list of winners from all closed voting periods
      operationId: getWinners
      responses:
        '200':
          description: Successfully retrieved winners
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        votingPeriod:
                          $ref: '#/components/schemas/VotingPeriod'
                        winner:
                          $ref: '#/components/schemas/VoteResult'
              example:
                success: true
                data:
                  - votingPeriod:
                      id: "vp-2024-01"
                      year: 2024
                      month: 1
                      status: "closed"
                    winner:
                      employeeId: "emp-456"
                      employeeName: "Jane Smith"
                      department: "Engineering"
                      position: "Senior Engineer"
                      nominationCount: 8
                      percentage: 17.78
                      rank: 1
                  - votingPeriod:
                      id: "vp-2023-12"
                      year: 2023
                      month: 12
                      status: "closed"
                    winner:
                      employeeId: "emp-123"
                      employeeName: "John Doe"
                      department: "Sales"
                      position: "Account Manager"
                      nominationCount: 7
                      percentage: 15.56
                      rank: 1
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Azure AD Bearer token authentication. Include the token in the Authorization header as "Bearer {token}"

  schemas:
    Employee:
      type: object
      required:
        - id
        - email
        - department
        - position
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique employee identifier
          example: "emp-123"
        fullName:
          type: string
          description: Full name of the employee
          example: "John Doe"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        middleName:
          type: string
          description: Middle name or initial
          example: "M"
        email:
          type: string
          format: email
          description: Employee email address
          example: "john.doe@company.com"
        department:
          type: string
          description: Department name
          example: "Engineering"
        position:
          type: string
          description: Job position or title
          example: "Software Engineer"
        positionId:
          type: string
          description: Position identifier
          example: "pos-456"
        companyCode:
          type: string
          description: Company or division code
          example: "LMMC"
        jobTitle:
          type: string
          description: Detailed job title
          example: "Senior Software Engineer"
        homeDepartment:
          type: string
          description: Home department for matrix organizations
          example: "Engineering"
        reportsTo:
          type: string
          description: Manager's employee ID
          example: "emp-789"
        directReportsCount:
          type: integer
          description: Number of direct reports
          example: 3
        location:
          type: string
          description: Office location
          example: "New York"
        positionStatus:
          type: string
          description: Employment position status
          example: "Active"
        hireDate:
          type: string
          format: date-time
          description: Original hire date
          example: "2022-01-15T00:00:00Z"
        rehireDate:
          type: string
          format: date-time
          description: Rehire date if applicable
          example: "2023-01-15T00:00:00Z"
        isActive:
          type: boolean
          description: Whether the employee is currently active
          example: true
        excludeFromSync:
          type: boolean
          description: Whether to exclude from synchronization
          example: false
        source:
          type: string
          enum: [adp, azure, adp_azure]
          description: Data source for employee information
          example: "azure"
        role:
          type: string
          description: User role in the system
          example: "user"
        votingGroup:
          type: string
          description: Assigned voting group
          example: "group-a"
        createdAt:
          type: string
          format: date-time
          description: Record creation timestamp
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"

    EmployeeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Employee'

    EmployeeListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            employees:
              type: array
              items:
                $ref: '#/components/schemas/Employee'
            total:
              type: integer
              description: Total number of employees returned
              example: 150

    SyncResult:
      type: object
      properties:
        newUsers:
          type: integer
          description: Number of new employees added
          example: 5
        updatedUsers:
          type: integer
          description: Number of existing employees updated
          example: 45
        totalProcessed:
          type: integer
          description: Total number of employees processed
          example: 150
        errors:
          type: array
          items:
            type: string
          description: List of error messages encountered during sync
          example: []

    Criteria:
      type: object
      required:
        - communication
        - innovation
        - leadership
        - problemSolving
        - reliability
        - teamwork
      properties:
        communication:
          type: number
          minimum: 1
          maximum: 5
          description: Communication skills rating (1-5)
          example: 5
        innovation:
          type: number
          minimum: 1
          maximum: 5
          description: Innovation and creativity rating (1-5)
          example: 4
        leadership:
          type: number
          minimum: 1
          maximum: 5
          description: Leadership abilities rating (1-5)
          example: 5
        problemSolving:
          type: number
          minimum: 1
          maximum: 5
          description: Problem-solving skills rating (1-5)
          example: 4
        reliability:
          type: number
          minimum: 1
          maximum: 5
          description: Reliability and dependability rating (1-5)
          example: 5
        teamwork:
          type: number
          minimum: 1
          maximum: 5
          description: Teamwork and collaboration rating (1-5)
          example: 5

    CreateNominationRequest:
      type: object
      required:
        - nominatedEmployeeId
        - reason
        - criteria
      properties:
        nominatedEmployeeId:
          type: string
          description: ID of the employee being nominated
          example: "emp-456"
        reason:
          type: string
          description: Detailed reason for the nomination
          example: "Exceptional leadership and innovation in Q1 projects"
          minLength: 10
        criteria:
          $ref: '#/components/schemas/Criteria'

    UpdateNominationRequest:
      type: object
      properties:
        nominatedEmployeeId:
          type: string
          description: ID of the employee being nominated
          example: "emp-456"
        reason:
          type: string
          description: Updated reason for the nomination
          example: "Exceptional leadership and innovation in Q1 projects"
          minLength: 10
        criteria:
          $ref: '#/components/schemas/Criteria'

    Nomination:
      type: object
      required:
        - id
        - nominatedEmployeeId
        - nominatorEmail
        - votingPeriodId
        - reason
        - criteria
        - createdAt
      properties:
        id:
          type: string
          description: Unique nomination identifier
          example: "nom-789"
        nominatedEmployeeId:
          type: string
          description: ID of the nominated employee
          example: "emp-456"
        nominatorEmail:
          type: string
          format: email
          description: Email of the person who created the nomination
          example: "john.doe@company.com"
        votingPeriodId:
          type: string
          description: ID of the associated voting period
          example: "vp-2024-01"
        reason:
          type: string
          description: Reason for the nomination
          example: "Exceptional leadership and innovation in Q1 projects"
        criteria:
          $ref: '#/components/schemas/Criteria'
        createdAt:
          type: string
          format: date-time
          description: Nomination creation timestamp
          example: "2024-01-15T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-16T10:00:00Z"

    VotingPeriod:
      type: object
      required:
        - id
        - year
        - month
        - startDate
        - endDate
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique voting period identifier
          example: "vp-2024-01"
        year:
          type: integer
          description: Year of the voting period
          example: 2024
          minimum: 2020
        month:
          type: integer
          description: Month of the voting period (1-12)
          example: 1
          minimum: 1
          maximum: 12
        startDate:
          type: string
          format: date-time
          description: Start date and time of the voting period
          example: "2024-01-01T00:00:00Z"
        endDate:
          type: string
          format: date-time
          description: End date and time of the voting period
          example: "2024-01-31T23:59:59Z"
        status:
          type: string
          enum: [active, closed, pending]
          description: Current status of the voting period
          example: "active"
        createdAt:
          type: string
          format: date-time
          description: Record creation timestamp
          example: "2023-12-15T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:00:00Z"

    VoteResult:
      type: object
      required:
        - votingPeriodId
        - employeeId
        - employeeName
        - department
        - position
        - nominationCount
        - percentage
        - rank
        - averageCriteria
      properties:
        votingPeriodId:
          type: string
          description: ID of the voting period
          example: "vp-2024-01"
        employeeId:
          type: string
          description: ID of the employee
          example: "emp-456"
        employeeName:
          type: string
          description: Full name of the employee
          example: "Jane Smith"
        department:
          type: string
          description: Employee's department
          example: "Engineering"
        position:
          type: string
          description: Employee's position
          example: "Senior Engineer"
        nominationCount:
          type: integer
          description: Number of nominations received
          example: 8
        percentage:
          type: number
          format: float
          description: Percentage of total nominations
          example: 17.78
        rank:
          type: integer
          description: Ranking position in results
          example: 1
        averageCriteria:
          $ref: '#/components/schemas/Criteria'

    VotingPeriodResults:
      type: object
      required:
        - votingPeriod
        - totalNominations
        - averageVotes
        - results
      properties:
        votingPeriod:
          type: object
          properties:
            id:
              type: string
              example: "vp-2024-01"
            year:
              type: integer
              example: 2024
            month:
              type: integer
              example: 1
            status:
              type: string
              example: "closed"
        totalNominations:
          type: integer
          description: Total number of nominations in this period
          example: 45
        averageVotes:
          type: number
          description: Average nominations per employee
          example: 3
        results:
          type: array
          items:
            $ref: '#/components/schemas/VoteResult'
        winner:
          $ref: '#/components/schemas/VoteResult'

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message describing what went wrong
          example: "Resource not found"

  responses:
    BadRequestError:
      description: Bad request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Bad request"

    UnauthorizedError:
      description: Unauthorized - Missing or invalid authentication token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Unauthorized"

    ForbiddenError:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Forbidden"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Internal server error"